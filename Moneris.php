<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Moneris;

use Moneris\Resource\MonerisApi;
use Propel\Runtime\Connection\ConnectionInterface;
use Thelia\Install\Database;
use Thelia\Model\Order;
use Thelia\Module\AbstractPaymentModule;

/**
 * Class Moneris
 * @package Moneris
 */
class Moneris extends AbstractPaymentModule
{
    const MESSAGE_DOMAIN = "moneris";
    const ROUTER = "router.moneris";
    const MONERIS_ORDER_ID = "moneris.order.id";
    const MONERIS_ORDER_REF = "moneris.order.ref";

    public function postActivation(ConnectionInterface $con = null)
    {
        $database = new Database($con);

        $database->insertSql(null, [__DIR__ . "/Config/create.sql", __DIR__ . "/Config/insert.sql"]);

        /* insert the images from image folder if not already done */
        $moduleModel = $this->getModuleModel();

        if (! $moduleModel->isModuleImageDeployed($con)) {
            $this->deployImageFolder($moduleModel, sprintf('%s'.DS.'Resource'.DS.'image', __DIR__), $con);
        }
    }

    /**
     *
     *  Method used by payment gateway.
     *
     *  If this method return a \Thelia\Core\HttpFoundation\Response instance, this response is send to the
     *  browser.
     *
     *  In many cases, it's necessary to send a form to the payment gateway. On your response you can return this form already
     *  completed, ready to be sent
     *
     * @param  \Thelia\Model\Order $order processed order
     * @return null|\Thelia\Core\HttpFoundation\Response
     */
    public function pay(Order $order)
    {
        if ($this->isValidPayment()) {
            $this->getRequest()->getSession()->set(self::MONERIS_ORDER_ID, $order->getId());
            $this->getRequest()->getSession()->set(self::MONERIS_ORDER_REF, $order->getRef());

            return $this->generateGatewayFormResponse($order, '', []);
        }
    }

    /**
     *
     * This method is call on Payment loop.
     *
     * If you return true, the payment method will de display
     * If you return false, the payment method will not be display
     *
     * @return boolean
     */
    public function isValidPayment()
    {
        if ($this->getConfigValue('environment') == MonerisApi::ENV_TESTING && !$this->isDevEnvironment()) {
            return false;
        }
        return ($this->isDevEnvironment() || $this->isSslEnabled());
    }

    /**
     * Return true if the current environment is in Dev mode
     *
     * @return bool
     */
    protected function isDevEnvironment()
    {
        return 'dev' == $this->getContainer()->getParameter('kernel.environment');
    }

    /**
     * return true if SSL is enabled
     *
     * @return bool
     */
    protected function isSslEnabled()
    {
        return $this->getRequest()->isSecure();
    }

    /**
     * if you want, you can manage stock in your module instead of order process.
     * Return false to decrease the stock when order status switch to pay
     *
     * @return bool
     */
    public function manageStockOnCreation()
    {
        // TODO: Implement manageStockOnCreation() method.
    }
}
