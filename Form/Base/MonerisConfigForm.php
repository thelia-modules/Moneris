<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Moneris\Form\Base;

use Moneris\Moneris;
use Thelia\Form\BaseForm;
use Moneris\Model\Config\MonerisConfigValue;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class MonerisConfigForm
 * @package Moneris\Form\Base
 * @author TheliaStudio
 */
class MonerisConfigForm extends BaseForm
{
    const FORM_NAME = "moneris_config_form";

    /**
     *
     * in this function you add all the fields you need for your Form.
     * Form this you have to call add method on $this->formBuilder attribute :
     *
     * $this->formBuilder->add("name", "text")
     *   ->add("email", "email", array(
     *           "attr" => array(
     *               "class" => "field"
     *           ),
     *           "label" => "email",
     *           "constraints" => array(
     *               new \Symfony\Component\Validator\Constraints\NotBlank()
     *           )
     *       )
     *   )
     *   ->add('age', 'integer');
     *
     * @return null
     */
    protected function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addStoreIdField($translationKeys, $fieldsIdKeys);
        $this->addApiTokenField($translationKeys, $fieldsIdKeys);
        $this->addEnvironmentField($translationKeys, $fieldsIdKeys);
    }

    protected function addStoreIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("store_id", "text", array(
                "label" => $this->readKey("store_id", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("store_id", $fieldsIdKeys),
                    "help" => $this->readKey("help.store_id", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => Moneris::getConfigValue(MonerisConfigValue::STORE_ID),
            ))
        ;
    }

    protected function addApiTokenField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("api_token", "text", array(
                "label" => $this->readKey("api_token", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("api_token", $fieldsIdKeys),
                    "help" => $this->readKey("help.api_token", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => Moneris::getConfigValue(MonerisConfigValue::API_TOKEN),
            ))
        ;
    }

    protected function addEnvironmentField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("environment", "text", array(
                "label" => $this->readKey("environment", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("environment", $fieldsIdKeys),
                    "help" => $this->readKey("help.environment", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => Moneris::getConfigValue(MonerisConfigValue::ENVIRONMENT),
            ))
        ;
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "store_id" => "store_id",
            "api_token" => "api_token",
            "environment" => "environment",
        );
    }
}
